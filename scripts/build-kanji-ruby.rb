#!/usr/bin/ruby -w
#encoding: UTF-8

$LOAD_PATH << File.dirname(__FILE__)

require 'DataKanji.rb'
require 'Kanji.rb'

kanji_by_keyword = {} # hash of keyword (as symbol) to kanji unicode

kanji_with_unique_keyword = []

def kanji_keyword(k)
  return k.english().first().downcase().gsub(' ', "*")
end

# read and process the kanji datafile 
kanji_data_file = "kanji.data" # Hard code this for now
kanji_data = DataKanji.create_from_file(kanji_data_file)
kanji_data.kanji().each() {
  |k|
  k.english().each() {
    |word|
    idx = word.upcase().gsub(' ', "*")
    if kanji_by_keyword[idx].nil?()
      kanji_by_keyword[idx] = k
    end
  }
  # The first heisig keyword is used as a lowercase key
  kwd = kanji_keyword(k)
  if kanji_by_keyword[kwd] != nil
    oh = kanji_by_keyword[kwd].heisig()
    $stderr.puts("WARNING: seen [#{kwd}] again; ignoring this for [#{k.heisig()}], already stored for [#{oh}]")
  else
    kanji_by_keyword[kwd] = k
    kanji_with_unique_keyword << k
  end
}

# Now output a suitable ruby source file

puts("#!/usr/bin/ruby -w")
puts("#encoding: UTF-8")
puts()
puts("$LOAD_PATH << File.dirname(__FILE__)")
puts()
puts("# Do not edit: This file automatically generated by #{File::basename($0)}")
puts()
puts("require 'Kanji.rb'")
puts()
puts("require 'singleton.rb'")
puts("class KD")
puts("  include Singleton")
puts("  attr_reader :kanji")
puts("  def initialize()")
puts("    @kanji = {")
kanji_with_unique_keyword.each() {
  |k|
  puts("    \"#{kanji_keyword(k)}\" => Kanji.new(#{k.heisig()}, #{k.unicode()}, [\"#{k.onyomi().join('","')}\"], [\"#{k.kunyomi().join('","')}\"], [\"#{k.nanori().join('","')}\"], [\"#{k.english().join('","')}\"], #{k.jouyou()}, #{k.jlpt()}),")
}
puts("    }")
puts("  end")
puts("end")

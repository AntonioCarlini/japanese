#!/usr/bin/ruby -w
#encoding: UTF-8

$LOAD_PATH << File.dirname(__FILE__)

require 'FastKanji.rb'
require 'Kanji.rb'

kanji_by_keyword = {} # hash of keyword (as symbol) to kanji unicode

kanji_with_unique_keyword = []

def kanji_keyword(k)
  return k.english().first().downcase().gsub(' ', "*")
end

# Fetch the arguments
if ARGV.size() != 1
  raise("Usage: #{File.basename($0)} heisig-file")
end

heisig = ARGV.shift()
kanji_data_file = ARGV.shift()

# File format:
#file version 2.0 2007-07-30
#heisignumber:kanji:keyword3rd-ed:keyword4th-ed:keyword5th-ed:strokecount:indexordinal:lessonnumber

File.readlines(heisig).each() {
  |line|
  next if line =~ /^#/
  hn, kanji_char, kw3, kw4, kw5, stroke, index, lesson = line.split(':')
  kw5key = kw5.gsub(/ /, "*")
  raise("Bad line: [#{line.chomp()}]") if kw5key.nil?() || kw5key.empty?()
  kanji_data = KD.instance().kanji()[kw5key.downcase()]
  if kanji_data.nil?()
    puts("No kanji found for keyword [#{kw5key}]")
    next
  end
  if kanji_data.heisig() != hn.to_i()
    puts("Bad kanji found for keyword [#{kw5key}]: expected heisig #{hn} but found #{kanji_data.heisig()}")
  end
}


=begin
=end











=begin
kanji_data.kanji().each() {
  |k|
  k.english().each() {
    |word|
    idx = word.upcase().gsub(' ', "*")
    if kanji_by_keyword[idx].nil?()
      kanji_by_keyword[idx] = k
    end
  }
  # The first heisig keyword is used as a lowercase key
  kwd = kanji_keyword(k)
  if kanji_by_keyword[kwd] != nil
    oh = kanji_by_keyword[kwd].heisig()
    $stderr.puts("WARNING: seen [#{kwd}] again; ignoring this for [#{k.heisig()}], already stored for [#{oh}]")
  else
    kanji_by_keyword[kwd] = k
    kanji_with_unique_keyword << k
  end
}

# Now output a suitable ruby source file

puts("#!/usr/bin/ruby -w")
puts("#encoding: UTF-8")
puts()
puts("$LOAD_PATH << File.dirname(__FILE__)")
puts()
puts("# Do not edit: This file automatically generated by #{File::basename($0)}")
puts()
puts("require 'Kanji.rb'")
puts()
puts("require 'singleton.rb'")
puts("class KD")
puts("  include Singleton")
puts("  attr_reader :kanji")
puts("  def initialize()")
puts("    @kanji = {")
kanji_with_unique_keyword.each() {
  |k|
  puts("    \"#{kanji_keyword(k)}\" => Kanji.new(#{k.heisig()}, #{k.unicode()}, [\"#{k.onyomi().join('","')}\"], [\"#{k.kunyomi().join('","')}\"], [\"#{k.nanori().join('","')}\"], [\"#{k.english().join('","')}\"], #{k.jouyou()}, #{k.jlpt()}),")
}
puts("    }")
puts("  end")
puts("end")
=end
